"""
Django settings for KitsuneCore project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv, dotenv_values
from .settings_authentication import *

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# This  part of code is for keep secret variables secure
dotenv_path = os.path.join(BASE_DIR, ".env")

# Get environment variables from .env file
env_variables = dotenv_values(dotenv_path)

# Delete the environment variables from .env file
for key in env_variables:
    if key in os.environ:
        del os.environ[key]

# load .env
load_dotenv(dotenv_path)  # take environment variables from .env

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.getenv("DEBUG"))

# Maintenance
MAINTENANCE_MODE = os.getenv("MAINTENANCE_MODE")
MAINTENANCE_BYPASS_QUERY = os.getenv("MAINTENANCE_BYPASS_QUERY")

# Get ALLOWED_HOSTS from .env, split by comma, and strip whitespace
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "localhost").split(",")
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "django.contrib.sitemaps",
    "django.contrib.sites",
    "django.contrib.humanize",
       
    # Apps
    'apps.CoreApp',
    'apps.AuthApp',
    'apps.HomeApp',
    
    # Authentication
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Allauth account middleware
    "allauth.account.middleware.AccountMiddleware",
    # 'apps.baseApp.middleware.MaintenanceModeMiddleware',
]

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost", # nginx
    "http://127.0.0.1", # nginx
    "http://nginx", # nginx
    "http://mainframe", # backend
]

CORS_ALLOW_CREDENTIALS = True # Allow cookies to be sent with requests

ROOT_URLCONF = f'{os.getenv("APP_NAME")}.urls'

TEMPLATE_DIR = os.path.join(BASE_DIR, "templates")

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        "DIRS": [
            TEMPLATE_DIR,
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'apps.CoreApp.context_processors.core',
            ],
            'debug': DEBUG,
        },
    },
]

WSGI_APPLICATION = f'{os.getenv("APP_NAME")}.wsgi.application'


# Email settings
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv("EMAIL_ADDRESS")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_PASSWORD")
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
DEFAULT_FROM_EMAIL = os.getenv("EMAIL_ADDRESS")


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": os.getenv("DATABASE_NAME"),
        "USER": os.getenv("DATABASE_USERNAME"),
        "PASSWORD": os.getenv("DATABASE_PASSWORD"),
        "HOST": os.getenv("DATABASE_HOST"),
        "PORT": os.getenv("DATABASE_PORT"),
    }
}


SITE_ID = int(os.getenv("SITE_ID"))
SITE_URL = os.getenv("SITE_URL")
INTERNAL_API_URL = os.getenv("INTERNAL_API_URL")

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Australia/Melbourne"

USE_I18N = False

USE_L10N = False

USE_TZ = False


# AWS S3 settings
AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# Check if DEBUG is True
if os.getenv("LOCAL_STORAGE"):
    # Use local file storage when LOCAL_STORAGE is True
    STATIC_URL = "static/"
    MEDIA_URL = "media/"
    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
            "OPTIONS": {
                "location": os.path.join(BASE_DIR, "media/"),
                "base_url": "/media/",
            },
        },
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
            "OPTIONS": {
                "location": os.path.join(BASE_DIR, "static/"),
                "base_url": "/static/",
            },
        },
    }

    # STATIC_URL = 'static/'
    # STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
    # MEDIA_URL = '/media/'
    # MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
else:
    # Use AWS S3 storage when LOCAL_STORAGE is False
    # Define storage backends for media and static files
    STORAGES = {
        "default": {
            "BACKEND": "storages.backends.s3.S3Storage",
            "OPTIONS": {
                "bucket_name": AWS_STORAGE_BUCKET_NAME,
                "location": "media/",
            },
        },
        "staticfiles": {
            "BACKEND": "storages.backends.s3.S3Storage",
            "OPTIONS": {
                "bucket_name": AWS_STORAGE_BUCKET_NAME,
                "location": "static/",
            },
        },
    }

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# App Information Settings
APP_INFO = {
    'APP_NAME': os.getenv('APP_NAME'),
    'COMPANY_NAME': os.getenv('COMPANY_NAME'),
    'SOCIAL_LINKS': {
        'twitter': os.getenv('SOCIAL_TWITTER'),
        'facebook': os.getenv('SOCIAL_FACEBOOK'),
        'instagram': os.getenv('SOCIAL_INSTAGRAM'),
    }
}
